/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { authenticate } from '../fn/authentication/authenticate';
import { Authenticate$Params } from '../fn/authentication/authenticate';
import { AuthenticationResponse } from '../models/authentication-response';
import { confirm } from '../fn/authentication/confirm';
import { Confirm$Params } from '../fn/authentication/confirm';
import { registerDoctor } from '../fn/authentication/register-doctor';
import { RegisterDoctor$Params } from '../fn/authentication/register-doctor';
import { registerPatient } from '../fn/authentication/register-patient';
import { RegisterPatient$Params } from '../fn/authentication/register-patient';
import {jwtDecode} from "jwt-decode";

@Injectable({ providedIn: 'root' })
export class AuthenticationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `registerPatient()` */
  static readonly RegisterPatientPath = '/auth/register-patient';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `registerPatient()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerPatient$Response(params: RegisterPatient$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return registerPatient(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `registerPatient$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerPatient(params: RegisterPatient$Params, context?: HttpContext): Observable<{
}> {
    return this.registerPatient$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `registerDoctor()` */
  static readonly RegisterDoctorPath = '/auth/register-doctor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `registerDoctor()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerDoctor$Response(params: RegisterDoctor$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return registerDoctor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `registerDoctor$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerDoctor(params: RegisterDoctor$Params, context?: HttpContext): Observable<{
}> {
    return this.registerDoctor$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `authenticate()` */
  static readonly AuthenticatePath = '/auth/authenticate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authenticate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authenticate$Response(params: Authenticate$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthenticationResponse>> {
    return authenticate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authenticate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authenticate(params: Authenticate$Params, context?: HttpContext): Observable<AuthenticationResponse> {
    return this.authenticate$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthenticationResponse>): AuthenticationResponse => r.body)
    );
  }

  /** Path part for operation `confirm()` */
  static readonly ConfirmPath = '/auth/activate-account';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `confirm()` instead.
   *
   * This method doesn't expect any request body.
   */
  confirm$Response(params: Confirm$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return confirm(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `confirm$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  confirm(params: Confirm$Params, context?: HttpContext): Observable<void> {
    return this.confirm$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  // Verifică dacă utilizatorul este autentificat
  isAuthenticated(): boolean {
    const token = localStorage.getItem('token');
    return token ? true : false;
  }

  // Obține rolurile din JWT
  getRolesFromToken(): string[] {
    const token = localStorage.getItem('token');
    if (token) {
      const decoded: any = jwtDecode(token);
      return decoded.authorities || [];  // Autoritățile rolurilor (ex: PATIENT, ADMIN)
    }
    return [];
  }

  // Obține numele complet din JWT
  getUsernameFromToken(): string {
    const token = localStorage.getItem('token');
    if (token) {
      const decoded: any = jwtDecode(token);
      return decoded.fullName || ''; // 'fullName' este câmpul care conține numele complet
    }
    return '';
  }

  // Logout (șterge token-ul și altele)
  logout(): void {
    localStorage.removeItem('token');
  }

  isUserRole(role: string): boolean {
    const roles = this.getRolesFromToken();
    return roles.includes(role);
  }

}
