/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { DoctorDto } from '../models/doctor-dto';
import { getUserProfile } from '../fn/user-controller/get-user-profile';
import { GetUserProfile$Params } from '../fn/user-controller/get-user-profile';
import { PatientDto } from '../models/patient-dto';
import { updateUserProfile } from '../fn/user-controller/update-user-profile';
import { UpdateUserProfile$Params } from '../fn/user-controller/update-user-profile';

@Injectable({ providedIn: 'root' })
export class UserControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateUserProfile()` */
  static readonly UpdateUserProfilePath = '/profile/profile/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUserProfile()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserProfile$Response(params: UpdateUserProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateUserProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUserProfile$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserProfile(params: UpdateUserProfile$Params, context?: HttpContext): Observable<{
}> {
    return this.updateUserProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getUserProfile()` */
  static readonly GetUserProfilePath = '/profile/profile';

  /**
   * Get User Profile.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserProfile()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserProfile$Response(params?: GetUserProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<(DoctorDto | PatientDto)>> {
    return getUserProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * Get User Profile.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserProfile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserProfile(params?: GetUserProfile$Params, context?: HttpContext): Observable<(DoctorDto | PatientDto)> {
    return this.getUserProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<(DoctorDto | PatientDto)>): (DoctorDto | PatientDto) => r.body)
    );
  }

}
